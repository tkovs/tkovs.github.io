<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>https://tkovs.me/</link>
    <atom:link href="https://tkovs.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 18 Sep 2017 23:26:43 -0300</pubDate>
    <lastBuildDate>Mon, 18 Sep 2017 23:26:43 -0300</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Comandos básicos do Terminal</title>
        <description>&lt;h2 id=&quot;tabela-de-conteúdo&quot;&gt;Tabela de conteúdo&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#id-introducao&quot;&gt;Introdução&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-terminal&quot;&gt;Terminal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-comando&quot;&gt;Comando&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-dicas&quot;&gt;Dicas&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-dicas-autocomplemento&quot;&gt;Autocomplemento&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-dicas-manual&quot;&gt;Manual&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-dicas-ajuda&quot;&gt;Ajuda&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-dicas-sudo&quot;&gt;Permissão&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-dicas-info&quot;&gt;Info&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-navegacao&quot;&gt;Navegação&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-navegacao-listar-diretorios&quot;&gt;Listar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-navegacao-navegar-entre-pastas&quot;&gt;Navegar entre pastas&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-navegacao-criar-diretorio&quot;&gt;Criar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-navegacao-apagar-diretorios&quot;&gt;Apagar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-navegacao-renomear-diretorios&quot;&gt;Renomear&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos&quot;&gt;Manipulação de arquivos&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-listar-arquivos&quot;&gt;Listar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-criar-arquivos&quot;&gt;Criar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-deletar-arquivos&quot;&gt;Deletar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-copiar-arquivos&quot;&gt;Copiar&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-mover-arquivos&quot;&gt;Mover&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-renomear-arquivos&quot;&gt;Renomear&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-manipulacao-arquivos-exibir-conteudo&quot;&gt;Exibir conteúdo&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-comandos-gerais&quot;&gt;Comandos gerais&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-gerais-pausa&quot;&gt;Pausa (sleep)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-gerais-data-e-hora&quot;&gt;Data e Hora&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-gerais-limpar-tela&quot;&gt;Limpar tela do terminal&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-gerais-historico-comandos&quot;&gt;Histórico de comandos&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-conclusao&quot;&gt;Conclusão&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;div id=&quot;id-introducao&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;A ideia desse post surgiu quando eu vi a dificuldade que minha turma no 4º ano de informática no
IFAL tem com o terminal. Há ainda uma visão ruim sobre ele, que é difícil e que interface
gráfica é mais “fácil”, mas é apenas costume, eu trabalho mais rápido no terminal que usando o mouse.&lt;/p&gt;

&lt;div id=&quot;id-terminal&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;terminal&quot;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/terminal-padrao.png&quot; alt=&quot;Terminal Linux&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Em primeiro lugar, observe o terminal. Na configuração do meu, o texto que aparece antes de qualquer
comando que eu insira é &lt;code&gt;[tkovs@toby Downloads]$&lt;/code&gt;. O que isso significa? Antes do @,
aparece o nome do usuário atual: &lt;strong&gt;tkovs&lt;/strong&gt;. Imediatamente após o @, o nome da máquina: &lt;strong&gt;toby&lt;/strong&gt;. Por
último, após o nome da máquina, informa-se a pasta atual que o terminal está acessando, que nesse
exemplo é a pasta &lt;strong&gt;Downloads&lt;/strong&gt;. Eu poderia trocar essa informação, mudar a forma que ela
aparece, exibir a hora, mostrar o caminho completo da pasta, data atual, etc.&lt;/p&gt;

&lt;p&gt;É através do terminal que você geralmente irá trabalhar, executando comandos.&lt;/p&gt;

&lt;div id=&quot;id-comando&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;comando&quot;&gt;Comando&lt;/h2&gt;

&lt;p&gt;Dentro do Terminal, você tem a oportunidade de executar os comandos que achar necessário. Basta
digitar o nome do comando e seus argumentos. Por exemplo, para listar os arquivos do diretório
atual, basta um &lt;code&gt;$ls&lt;/code&gt; para que uma lista seja retornada. Se você quiser listar os arquivos, e
antes de cada um exibir seu tamanho, basta usar a opção &lt;strong&gt;s&lt;/strong&gt;. O comando fica assim: &lt;code&gt;$ls -s&lt;/code&gt;,
ou na forma mais longa: &lt;code&gt;ls --size&lt;/code&gt;. Normalmente, opções têm a forma curta e a longa. Para usar
a curta usa-se 1 traço, e na longa, 2.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo mostro o comando ls de duas formas: na primeira usando sua forma sem argumentos, e
na segunda listando os arquivos em ordem de modificação onde os mais recentes aparecem primeiro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/ls-argumento.png&quot; alt=&quot;Arch Linux&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-dicas&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;dicas&quot;&gt;Dicas&lt;/h2&gt;

&lt;p&gt;Algumas dicas para lhe ajudar no uso do Terminal.&lt;/p&gt;

&lt;div id=&quot;id-dicas-autocomplemento&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;autocomplemento&quot;&gt;Autocomplemento&lt;/h4&gt;

&lt;p&gt;Recurso importante, completa automaticamente o nome de um comando ou arquivo conhecido pelo
Terminal apertando a tecla &lt;strong&gt;tab&lt;/strong&gt;, caso haja apenas uma possibilidade. Do contrário, ele lista
todas as possibilidades de comando ou arquivo conforme o texto que você inseriu antes de apertar
o tab.&lt;/p&gt;

&lt;div id=&quot;id-dicas-manual&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;manual&quot;&gt;Manual&lt;/h4&gt;

&lt;p&gt;O Linux tem um manual da maioria dos comandos e dos programas que você instala. Para usa-lo,
basta executar &lt;code&gt;man nome_comando&lt;/code&gt;. Se quer conhecer mais sobre o comando ls, que lista
diretórios, execute &lt;code&gt;man ls&lt;/code&gt; e verá uma explicação completa. Para sair do manual, pressione q.
O manual fica localizado em /etc/share/man, e é dividido em seções para organizar os tipos de
comandos, que vão desde chamadas do sistema (kernel) a comandos relacionados a jogos.&lt;/p&gt;

&lt;div id=&quot;id-dicas-ajuda&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;ajuda&quot;&gt;Ajuda&lt;/h4&gt;

&lt;p&gt;Muitos comandos têm por padrão a opção &lt;strong&gt;–help&lt;/strong&gt; para que uma breve explicação sobre ele seja
retornada. Também há o comando &lt;code&gt;help&lt;/code&gt; que exibe informações de alguns comandos que lhe são
passados como argumento.&lt;/p&gt;

&lt;p&gt;Exemplo da opção &lt;strong&gt;–help&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby ~]$ mkdir --help
Uso: mkdir [OPÇÃO]... DIRETÓRIO...
Create the DIRECTORY(ies), if they do not already exist.

Mandatory arguments to long options are mandatory for short options too.
  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask
  -p, --parents     no error if existing, make parent directories as needed
  -v, --verbose     print a message for each created directory
  -Z                   set SELinux security context of each created directory
                         to the default type
      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux
                         or SMACK security context to CTX
      --help     mostra esta ajuda e finaliza
      --version  informa a versão e finaliza

GNU coreutils online help: &amp;lt;http://www.gnu.org/software/coreutils/&amp;gt;
Report mkdir translation bugs to &amp;lt;http://translationproject.org/team/&amp;gt;
Full documentation at: &amp;lt;http://www.gnu.org/software/coreutils/mkdir&amp;gt;
or available locally via: info &amp;#39;(coreutils) mkdir invocation&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-dicas-sudo&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;permissão&quot;&gt;Permissão&lt;/h4&gt;

&lt;p&gt;As vezes, você não conseguirá executar alguns comandos, pois para isso precisará de privilégios que
não tem. Privilégios esses que outro usuário tem, geralmente o administrador. Para usa-los, existe o
comando &lt;code&gt;sudo&lt;/code&gt;. Digite sudo antes do comando que precisa de permissão e o termina irá lhe pedir
a senha de seu usuário, insira ela e aperte enter, o comando ira ser executado.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby ~]$ fdisk -l
fdisk: não foi possível abrir /dev/sda: Permissão negada
[tkovs@toby ~]$ sudo fdisk -l
[sudo] senha para tkovs: 
Disco /dev/sda: 465,8 GiB, 500107862016 bytes, 976773168 setores
Unidades: setor de 1 * 512 = 512 bytes
Tamanho de setor (lógico/físico): 512 bytes / 4096 bytes
Tamanho E/S (mínimo/ótimo): 4096 bytes / 4096 bytes
Tipo de rótulo do disco: gpt
Identificador do disco: BE149545-D8A3-4D79-9A8E-7F3D8A4CC935

Dispositivo    Início       Fim   Setores Tamanho Tipo
/dev/sda1        2048    616447    614400    300M Windows ambiente de recuperaçã
/dev/sda2      616448    821247    204800    100M Sistema EFI
/dev/sda3      821248   1083391    262144    128M Microsoft reservado
/dev/sda4     1083392 306280447 305197056  145,5G Microsoft dados básico
/dev/sda5   306280448 307202047    921600    450M Windows ambiente de recuperaçã
/dev/sda6   307202048 516917247 209715200    100G Linux raiz (x86-64)
/dev/sda7   516917248 967804927 450887680    215G Linux home&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-dicas-info&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;info&quot;&gt;Info&lt;/h4&gt;

&lt;p&gt;Outro meio de se obter informações sobre comandos é através do &lt;code&gt;info&lt;/code&gt;. Basta passar o nome do
comando que você quer obter detalhes para o info e ele abrirá um programa semelhante ao man.&lt;/p&gt;

&lt;p&gt;Exemplo de um &lt;code&gt;info cd&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;CD(1P)                     POSIX Programmer&amp;#39;s Manual                    CD(1P)

PROLOG
       This  manual  page is part of the POSIX Programmer&amp;#39;s Manual.  The Linux
       implementation of this interface may differ (consult the  corresponding
       Linux  manual page for details of Linux behavior), or the interface may
       not be implemented on Linux.

NAME
       cd — change the working directory

SYNOPSIS
       cd [−L|−P] [directory]

       cd −

DESCRIPTION
       The cd utility shall change the working directory of the current  shell
       execution  environment  (see Section 2.12, Shell Execution Environment)
       by executing the following steps in sequence. (In the following  steps,
       ...
       ...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-navegacao&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;navegação&quot;&gt;Navegação&lt;/h2&gt;

&lt;p&gt;Para os exemplos, usarei a estrutura de diretórios abaixo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.
├── include
│   └── cbrainfuck.h
├── LICENCE
├── main.c
├── Makefile
├── README.md
├── samples
│   ├── 666.bf
│   ├── beer.bf
│   ├── gameoflife.bf
│   ├── helloworld.bf
│   ├── print.bf
│   ├── squares.bf
│   └── triangle.bf
└── source
    └── cbrainfuck.c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-navegacao-listar-diretorios&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;listar&quot;&gt;Listar&lt;/h4&gt;

&lt;p&gt;Para listar as pastas contidas no diretório atual, basta executar &lt;code&gt;ls -d */&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-navegacao-navegar-entre-pastas&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;navegar-entre-pastas&quot;&gt;Navegar entre pastas&lt;/h4&gt;

&lt;p&gt;A navegação entre pastas acontece de forma simples. O comando &lt;code&gt;cd&lt;/code&gt; leva o terminal para o
diretório passado como argumento. Para voltar para um diretório acima, se passa &lt;strong&gt;..&lt;/strong&gt; para o
cd, e para voltar para o diretório anterior, se passa &lt;strong&gt;-&lt;/strong&gt;, já o &lt;strong&gt;~&lt;/strong&gt; leva-o para o diretório
principal de seu usuário.&lt;/p&gt;

&lt;p&gt;No exemplo abaixo, o terminal stá na pasta cbrainfuck. O &lt;code&gt;cd source&lt;/code&gt; leva-o até a pasta source,
e o comando seguinte retorna-o para cbrainfuck.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ cd source
[tkovs@toby source]$ cd ..
[tkovs@toby cbrainfuck]$ &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-navegacao-criar-diretorio&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;criar&quot;&gt;Criar&lt;/h4&gt;

&lt;p&gt;O comando &lt;code&gt;mkdir&lt;/code&gt; cria uma nova pasta, se ela não existe. Caso diretórios pais precisem ser criados,
deve-se usar a opção &lt;strong&gt;-p&lt;/strong&gt; no uso do mkdir.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vs@toby cbrainfuck]$ ls -d */
include/  samples/  source/
[tkovs@toby cbrainfuck]$ mkdir test
[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/  test/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-navegacao-apagar-diretorio&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;apagar&quot;&gt;Apagar&lt;/h4&gt;

&lt;p&gt;Semelhante ao mkdir, há o &lt;code&gt;rmdir&lt;/code&gt;. Enquanto mkdir resume &lt;em&gt;Make Directories&lt;/em&gt;, rmdir resume &lt;em&gt;Remove
Directories&lt;/em&gt;. Basta passar o nome de um diretório como argumento. Caso haja arquivos dentro do
diretório, faz-se necessário o uso da opção &lt;code&gt;--ignore-fail-on-non-empty&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/  test/
[tkovs@toby cbrainfuck]$ rmdir test/
[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-navegacao-renomear-diretorio&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;renomear&quot;&gt;Renomear&lt;/h4&gt;

&lt;p&gt;O comando &lt;code&gt;rename&lt;/code&gt; renomeia um arquivo ou uma pasta e funciona de um jeito simples. Ele
substitui a primeira ocorrência de &lt;strong&gt;expressao&lt;/strong&gt; pela sua &lt;strong&gt;substituição&lt;/strong&gt; no &lt;strong&gt;arquivo&lt;/strong&gt; escolhido,
de modo que o comando é escrito assim: &lt;code&gt;rename expressao substituição arquivo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/
[tkovs@toby cbrainfuck]$ mkdir tst01
[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/  tst01/
[tkovs@toby cbrainfuck]$ rename tst01/ test01/ tst01/
[tkovs@toby cbrainfuck]$ ls -d */
include/  samples/  source/  test01/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;manipulação-de-arquivos&quot;&gt;Manipulação de arquivos&lt;/h2&gt;

&lt;p&gt;Para os exemplos, usarei a estrutura de diretórios abaixo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.
├── include
│   └── cbrainfuck.h
├── LICENCE
├── main.c
├── Makefile
├── README.md
├── samples
│   ├── 666.bf
│   ├── beer.bf
│   ├── gameoflife.bf
│   ├── helloworld.bf
│   ├── print.bf
│   ├── squares.bf
│   └── triangle.bf
└── source
    └── cbrainfuck.c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos-listar-arquivos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;listar-1&quot;&gt;Listar&lt;/h4&gt;

&lt;p&gt;Para se listar apenas os arquivos de um diretório, execute &lt;code&gt;ls -p | grep -v */&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -p
include/  LICENCE  main.c  Makefile  README.md  samples/  source/
[tkovs@toby cbrainfuck]$ ls -p | grep -v /
LICENCE
main.c
Makefile
README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos-criar-arquivos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;criar-1&quot;&gt;Criar&lt;/h4&gt;

&lt;p&gt;O modo mais simples de se criar um arquivo vazio que eu conheço é através do comando &lt;code&gt;touch&lt;/code&gt;.
Basta passar o nome do arquivo para o comando touch.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -p | grep -v /
LICENCE
main.c
Makefile
README.md
[tkovs@toby cbrainfuck]$ touch fofao.hs
[tkovs@toby cbrainfuck]$ ls -p | grep -v /
fofao.hs
LICENCE
main.c
Makefile
README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos-deletar-arquivos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;deletar&quot;&gt;Deletar&lt;/h4&gt;

&lt;p&gt;Deletar um arquivo se dá através do comando &lt;code&gt;rm&lt;/code&gt; passando para ele o caminho do arquivo.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -p | grep -v /
fofao.hs
LICENCE
main.c
Makefile
README.md
[tkovs@toby cbrainfuck]$ rm fofao.hs
[tkovs@toby cbrainfuck]$ ls -p | grep -v /
LICENCE
main.c
Makefile
README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos-copiar-arquivos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;copiar&quot;&gt;Copiar&lt;/h4&gt;

&lt;p&gt;Para copiar um arquivo, basta passar o caminho do arquivo a ser copiado, e o caminho do arquivo a ser
criado com o conteúdo do outro arquivo, para o comando &lt;code&gt;cp&lt;/code&gt;. Seu uso fica assim: &lt;code&gt;cp fonte
destino&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -p | grep -v /
LICENCE
main.c
Makefile
README.md
[tkovs@toby cbrainfuck]$ cp main.c main.c.backup
[tkovs@toby cbrainfuck]$ ls -p | grep -v /
LICENCE
main.c
main.c.backup
Makefile
README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos-mover-arquivos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;mover&quot;&gt;Mover&lt;/h4&gt;

&lt;p&gt;Para mover um arquivo de um lugar a outro basta usar o &lt;code&gt;mv&lt;/code&gt; do mesmo jeito que se usa o
&lt;code&gt;cp&lt;/code&gt;, a diferença é que o arquivo fonte será apagado.&lt;/p&gt;

&lt;div id=&quot;id-manipulacao-arquivos-renomear-arquivos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;renomear-1&quot;&gt;Renomear&lt;/h4&gt;

&lt;p&gt;Como explica o &lt;code&gt;man&lt;/code&gt; quanto ao &lt;code&gt;rename&lt;/code&gt;: passa-se a &lt;strong&gt;expressão&lt;/strong&gt; a ser substituída pela
&lt;strong&gt;substituição&lt;/strong&gt; no &lt;strong&gt;arquivo&lt;/strong&gt; destino. Usando, fica assim: &lt;code&gt;rename expressão substituição
arquivo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ ls -p | grep -v /
LICENCE
main.c
main.c.backup
Makefile
README.md
[tkovs@toby cbrainfuck]$ rename Make Bang Makefile 
[tkovs@toby cbrainfuck]$ ls -p | grep -v /
Bangfile
LICENCE
main.c
main.c.backup
README.md&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-manipulacao-arquivos-exibir-conteudo&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;exibir-conteúdo&quot;&gt;Exibir conteúdo&lt;/h4&gt;

&lt;p&gt;O comando &lt;code&gt;cat&lt;/code&gt; concatena um arquivo para a saída padrão. No terminal, quando um arquivo é
passado como argumento para o comando cat, seu conteúdo é exibido no próprio terminal.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby cbrainfuck]$ cat main.c
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

#include &amp;quot;include/cbrainfuck.h&amp;quot;

int main(int argc, char ** argv) {
    char *s;
    s = interpreter(argv[1], (argc &amp;gt; 2 ? argv[2]:&amp;quot;/dev/stdin&amp;quot;));

    if (_ERRORS_) {
        fprintf(stderr, &amp;quot;%s\n&amp;quot;, _MESSAGE_);
        return 1;
    } else {
        printf (&amp;quot;%s&amp;quot;, s);
        free(s);
    }

    return 0;
}
[tkovs@toby cbrainfuck]$ &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Também há o &lt;code&gt;more&lt;/code&gt;, que divide o conteúdo de um arquivo em páginas. Para se navegar, use o
&lt;strong&gt;espaço&lt;/strong&gt; para continuar a leitura e o &lt;strong&gt;b&lt;/strong&gt; para voltar uma página. Para fechar, pressione &lt;strong&gt;q&lt;/strong&gt;.&lt;/p&gt;

&lt;div id=&quot;id-comandos-gerais&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;comandos-gerais&quot;&gt;Comandos gerais&lt;/h2&gt;

&lt;p&gt;Comandos sem um objetivo em específico.&lt;/p&gt;

&lt;div id=&quot;id-comandos-gerais-pausa&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;pausa&quot;&gt;Pausa&lt;/h4&gt;

&lt;p&gt;Existe um comando que simplesmente faz uma pausa por um tempo específico. É o comando &lt;code&gt;sleep&lt;/code&gt;.
Para usado, basta passar a quantidade de segundos como argumento para o sleep. Exemplo: &lt;code&gt;sleep
5&lt;/code&gt; pausa por 5 segundos. Mas pra que usar? Bom, 2 comandos podem ser executados um após o outro,
basta usar o &lt;strong&gt;&amp;amp;&amp;amp;&lt;/strong&gt; entre os comandos. Exemplo: &lt;code&gt;sleep 3600 &amp;amp;&amp;amp; reboot&lt;/code&gt; faz com que o terminal
espere por 3600 segundos, equivalente à 1 hora, e então reinicia a máquina.&lt;/p&gt;

&lt;div id=&quot;id-comandos-gerais-data-e-hora&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;data-e-hora&quot;&gt;Data e Hora&lt;/h4&gt;

&lt;p&gt;Para obter a data e a hora atual, usa-se o comando &lt;code&gt;date&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[tkovs@toby ~]$ date
Dom Mai 15 20:42:46 BRT 2016
[tkovs@toby ~]$ &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-comandos-gerais-limpar-tela&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;limpar-a-tela-do-terminal&quot;&gt;Limpar a tela do terminal&lt;/h4&gt;

&lt;p&gt;Para limpar a tela do terminal, pressione Ctrl + L.&lt;/p&gt;

&lt;div id=&quot;id-comandos-gerais-historico-comandos&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;histórico-de-comandos&quot;&gt;Histórico de comandos&lt;/h4&gt;

&lt;p&gt;Você pode acessar suas últimas centenas de comandos digitados no terminal. Apenas execute o
comando &lt;code&gt;history&lt;/code&gt;.&lt;/p&gt;

&lt;div id=&quot;id-conclusao&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Espero que com esse guia você esteja mais familiarizado com o terminal, e tenha perdido um pouco do
medo que é comum quando se trata de trabalhar apenas com texto, sem ajuda de interface gráfica.&lt;/p&gt;

&lt;p&gt;Quando &lt;strong&gt;eu&lt;/strong&gt; estou no Linux eu sempre uso terminal. É difícil eu não deixa-lo aberto. Uso o
terminal para programar (vim), para controlar versões (git), para copiar/mover/renomear/procurar
arquivos, configurar o sistema por completo, etc. Não espero que você chegue na mesma situação, mas
que ao menos se familiarize com ele. Boa sorte :)&lt;/p&gt;
</description>
        <pubDate>Sun, 15 May 2016 00:00:00 -0300</pubDate>
        <link>https://tkovs.me/blog/introducao-terminal</link>
        <guid isPermaLink="true">https://tkovs.me/blog/introducao-terminal</guid>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>Versionamento e iniciando no Git! (em progresso)</title>
        <description>&lt;h2 id=&quot;tabela-de-conteúdo&quot;&gt;Tabela de conteúdo&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#id-introducao&quot;&gt;Introdução&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-versionamento&quot;&gt;Versionamento&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-plataforma&quot;&gt;Plataforma&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-git&quot;&gt;Git&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-escolher-arquivos&quot;&gt;Escolher quais arquivos estão sob versionamento&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-nova-versao&quot;&gt;Definir uma nova versão&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comparacao-versoes&quot;&gt;Comparação de versões&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-navegacao-entre-versoes&quot;&gt;Navegação entre versões&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-ramificacoes&quot;&gt;Ramificações&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-gestao-usuarios&quot;&gt;Gerenciando vários contribuidores num mesmo projeto&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-instalacao-git&quot;&gt;Instalação do Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-configurando-usuario&quot;&gt;Configurando seu usuário no git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos&quot;&gt;Comandos básicos&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-init&quot;&gt;Init&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-status&quot;&gt;Status&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-add&quot;&gt;Add&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-commit&quot;&gt;Commit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-diff&quot;&gt;Diff&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-log&quot;&gt;Log&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-branch&quot;&gt;Branch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-comandos-basicos-checkout&quot;&gt;Checkout&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-demonstracao-pratica&quot;&gt;Demonstração prática&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;div id=&quot;id-introducao&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Introdução&lt;/p&gt;

&lt;p&gt;No decorrer do texto será abordado alguns temas importantes sobre versionamento, seguido de um
tutorial usando o Git no terminal.&lt;/p&gt;

&lt;div id=&quot;id-versionamento&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Versionamento&lt;/p&gt;

&lt;p&gt;Versionamento é como chamamos o ato de gerenciar diferentes versões de um mesmo arquivo, cada uma 
com um id de identificação - geralmente um número.&lt;/p&gt;

&lt;p&gt;Por experiência própria já vi muitos colegas - até mesmo professores - usarem um método de
versionamento muito manual: a cada versão do projeto toda a pasta era salva para um backup em que o
nome era a data ou o número da versão, fazendo com que todos arquivos que não foram alterados fossem
replicados e pesando muito, além de não ter recursos fundamentais que um sistema de controle de
versão tem.&lt;/p&gt;

&lt;p&gt;Nesse artigo mostrarei o Git que é um sistema de controle de versão muito usado e exigido por
empresas, além de ser fácil de usar e estar em constante atualização e crescimento.
id-plataforma&lt;/p&gt;

&lt;div id=&quot;id-plataforma&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Plataforma&lt;/p&gt;

&lt;p&gt;Independente da plataforma que você atue, há sistemas de controle de versão para Linux, Mac OS X,
Windows, Solaris e o que mais houver. Sempre haverá implementações de softwares com esse objetivo em
diferentes linguagens, tanto privados quanto de código aberto.&lt;/p&gt;

&lt;p&gt;Pessoalmente eu uso o Git no Arch Linux. Minha área de trabalho:
&lt;img src=&quot;../assets/img/arch-linux.png&quot; alt=&quot;Arch Linux&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-git&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Git&lt;/p&gt;

&lt;p&gt;Git é uma ferramenta escrita em C, de código aberto, que foi desenvolvida pra ser o sistema de
controle de versão do Linux. Hoje o Git é amplamente utilizado e é de fundamental importância
conhecê-lo. Pessoalmente, eu o utilizo para desenvolvimento de jogos, modelagem e texturização
e animação 3D, projetos de programação, trabalhos de escola, textos aleatórios, arquivos de 
configuração do linux. Gerencio tudo isso da forma fácil e prática que o Git oferece e propõe, pois
tudo acontece localmente sem necessidade de internet e seu funcionamento é simples para o usuário.&lt;/p&gt;

&lt;p&gt;Seu funcionamento se dá, pra início de conversa, com um comando inicial numa pasta. A partir daí,
todo arquivo que for copiado ou criado nessa pasta está sob controle do Git, com algumas exceções.&lt;/p&gt;

&lt;p&gt;A seguir, será demonstrado alguns dos recursos oferecidos pelo Git, e mais a frente um tutorial.&lt;/p&gt;

&lt;div id=&quot;id-escolher-arquivos&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Escolher quais arquivos estão sob versionamento&lt;/p&gt;

&lt;p&gt;Embora o controle de versão do Git gerencie uma pasta específica, você decide quais arquivos dentro
dessa pasta estão sob o controle desse sistema. Logo, não é porque um arquivo está dentro dessa
pasta que ele vai sofrer o &lt;strong&gt;tracking&lt;/strong&gt; do Git - tracking é só a supervisão, o policiamento do Git
sobre algo.&lt;/p&gt;

&lt;div id=&quot;id-nova-versao&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Definir uma nova versão&lt;/p&gt;

&lt;p&gt;A cada vez que você altera arquivos, uma nova versão deles está sendo criada teoricamente falando,
mas para que os arquivos que estão sobre o controle do Git sejam salvos numa nova versão é 
necessário fazer um &lt;strong&gt;commit&lt;/strong&gt; dos arquivos. Ao se executar um commit, você precisa fornecer uma
mensagem descrevendo a nova versão. Na mensagem, você pode dizer, de modo geral, o que foi alterado
e porque as alterações foram feitas. Isso é importante pois após vários commits pode-se listar todos
com as descrição sendo exibida, então você tem algo como uma linha do tempo no projeto.&lt;/p&gt;

&lt;div id=&quot;id-comparacao-versoes&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Comparação de versões&lt;/p&gt;

&lt;p&gt;Após ter mais de 1 versão do projeto gerenciado pelo Git, você pode comparar versões através do
&lt;strong&gt;diff&lt;/strong&gt;. O resultado é a mostra de todas as linhas que foram alteradas.&lt;/p&gt;

&lt;p&gt;A seguir há duas versões de um mesmo arquivo, e posteriormente a forma como o git mostra a
diferença entre essas duas versões.&lt;/p&gt;

&lt;p&gt;Primeira versão:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Olé! Como vi você?

Tchau.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Segunda versão:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Olá! Como vai você?

Tchau.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Resultado da execução do &lt;strong&gt;diff&lt;/strong&gt; entre as duas versões:
&lt;img src=&quot;../assets/img/diff-ola.png&quot; alt=&quot;Diferença entre duas versões&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-navegacao-entre-versoes&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Navegação entre versões&lt;/p&gt;

&lt;p&gt;Embora você passe a esmagadora maioria do tempo navegando no seu projeto em seu estado atual, você
pode visita-lo a qualquer momento em que um commit foi feito. No exemplo abaixo, o comando cat exibe
o conteúdo de um arquivo. Usando o comando cat duas vezes no mesmo arquivo ele mostra conteúdo
diferente, mas por quê? Porque entre as duas execuções o projeto foi alterado pra versão anterior,
então todos os arquivos foram alterados pro estado que estavam no commit anterior.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/navegando-versoes-antigas.png&quot; alt=&quot;Versões diferentes&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-ramificacoes&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Ramificações&lt;/p&gt;

&lt;p&gt;Quando você precisar fazer alterações no projeto, mas quiser manter uma cópia segura, não
precisa copiá-lo para algum lugar como um backup. Quando quiser adicionar um novo recurso, ou alterar
um arquivo sem riscos de corromper o projeto atual e ter dificuldades de reverter para o estado em
que funcionava, você não vai precisar salvar uma cópia do seu projeto como backup.
Ao invés de um backup, o Git cria uma ramificação do projeto em paralelo à ramificação
principal para que se trabalhe em linhas diferentes. Elas são independentes e podem simplesmentes não
se unirem no futuro. Ao se finalizar as alterações necessárias, o Git
faz o &lt;strong&gt;merge&lt;/strong&gt; de duas ramificações, que adiciona as alterações de uma ramificação em outra, dando a
você controle total sobre o projeto e as alterações feitas. E é claro, a qualquer momento você pode
navegar por diferentes ramificações, que no git são chamadas de &lt;strong&gt;branches&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O branch principal de um projeto, que é criado logo na inicialização do Git em um diretório, é o
branch &lt;strong&gt;master&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/feature-x.png&quot; alt=&quot;Feature-x&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-gestao-usuarios&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Gerenciando vários contribuidores num mesmo projeto&lt;/p&gt;

&lt;p&gt;Usando o merge, diferentes pessoas podem trabalhar num mesmo projeto de modo organizado, cada um
com sua ramificação própria atrás de um fim específico, desse modo ao não trabalharem num mesmo
arquivo a junção das alterações é feita rapidamente sem problemas. Caso você tente juntar diferentes
versões de um arquivo, com problemas de compatibilidade, o Git avisa quais são os dados que estão
entrando em conflito e aí fica por sua conta quais dados terão prioridade sobre outros no resultado
final.&lt;/p&gt;

&lt;div id=&quot;id-instalacao-git&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Instalação do Git&lt;/p&gt;

&lt;p&gt;Faça o download do Git para o seu sistema operacional seguindo os passos no próprio
&lt;a href=&quot;https://git-scm.com/download/&quot;&gt;site&lt;/a&gt; da ferramenta. A instalação é muito simples e leva pouco
tempo, além de ter muitos tutoriais na internet ensinando a fazê-lo.&lt;/p&gt;

&lt;div id=&quot;id-configurando-usuario&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Configurando seu usuário no git&lt;/p&gt;

&lt;p&gt;Após instalar, abra o terminal. Se você executar &lt;code&gt;git --version&lt;/code&gt;, e não obtiver a versão do git, algo
deu errado na instalação, mesmo que seja a adição do git no $PATH do seu sistema operacional.&lt;/p&gt;

&lt;p&gt;Quando fizer commits, seu email fica atrelado a ele, então você precisa informar ao Git seu nome e
seu email. Isso também se faz necessário para se conectar ao Github, mas deixarei isso para outro
artigo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seu usuário&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global user.name &lt;span class=&quot;s2&quot;&gt;&amp;quot;seu nome de usuário&amp;quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global user.email &lt;span class=&quot;s2&quot;&gt;&amp;quot;seu email&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Seu editor&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config --global core.editor &lt;span class=&quot;s2&quot;&gt;&amp;quot;seu editor de texto&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;E para verificar se está tudo certo, execute o comando abaixo. No meu notebook o resultado foi esse:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config -l
&lt;span class=&quot;go&quot;&gt;user.email=victor.rdg@hotmail.com&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;user.name=tkovs&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;core.repositoryformatversion=0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;core.filemode=true&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;core.bare=false&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;core.logallrefupdates=true&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote.origin.url=git@github.com:tkovs/tkovs.github.io.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;branch.master.remote=origin&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;branch.master.merge=refs/heads/master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;branch.source.remote=origin&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;branch.source.merge=refs/heads/source&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-comandos-basicos&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Comandos básicos&lt;/p&gt;

&lt;p&gt;Se nunca usou o terminal ou ainda tem dificuldades, sugiro que leia &lt;a href=&quot;https://tkovs.me/blog/introducao-terminal&quot;&gt;minha postagem&lt;/a&gt; sobre ele.&lt;/p&gt;

&lt;p&gt;Pra executar um comando do Git no terminal, digite &lt;strong&gt;git&lt;/strong&gt; seguido pelo comando. Exemplo do comando
&lt;strong&gt;init&lt;/strong&gt;: &lt;code&gt;git init&lt;/code&gt;.&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-init&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Init&lt;/p&gt;

&lt;p&gt;Esse comando é responsável por criar um repositório Git vazio. Um diretório só pode ser gerenciado
pelo Git se o &lt;code&gt;init&lt;/code&gt; for executado nele.&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-status&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Status&lt;/p&gt;

&lt;p&gt;Retorna informações sobre o repositório atual: lista de arquivos alterados desde o último commit,
branch atual, mudanças a serem &lt;em&gt;commitadas&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/comandos-basicos-status.png&quot; alt=&quot;git status&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-add&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Add&lt;/p&gt;

&lt;p&gt;Adiciona um arquivo que foi alterado para o gerenciamento do Git. Se um arquivo é alterado mas não
passa pelo comando &lt;code&gt;add&lt;/code&gt; antes do commit, suas alterações não são salvas.&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-commit&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Commit&lt;/p&gt;

&lt;p&gt;Salva as mudanças realizadas no repositório desde o último commit. Junto com as mudanças, salva
informações como, por exemplo, quem fez as alterações, data do commit, breve explicação sobre o
commit, etc. Cada commit tem um código como por exemplo
&lt;em&gt;a39ce6f14a6079ebdbe2d82e4fcd0bc643b65c97&lt;/em&gt;. Quando você for navegar entre os commits passados,
precisará desse código que é exibido usando o &lt;code&gt;log&lt;/code&gt;. Quando for usar o código, não precisa usar
mais que os 5 primeiros digitos de um código pra usa-lo.&lt;/p&gt;

&lt;p&gt;Exemplo: &lt;code&gt;git commit -m &quot;Nova função para imprimir pizzas reais&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-diff&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Diff&lt;/p&gt;

&lt;p&gt;Compara dois commits e mostra a diferença entre eles. &lt;strong&gt;Eu&lt;/strong&gt; uso muito pra comparar as alterações
que fiz desde o último commit antes de fazer o próximo commit, sempre.&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-log&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Log&lt;/p&gt;

&lt;p&gt;Lista todos os commits, junto com a descrição e informações básicas como quem foi o autor do commit
e a data. Detalhe: o commit mais novo pode ser referenciado por &lt;strong&gt;HEAD&lt;/strong&gt;, dessa forma, para comparar
as mudanças feitas desde o último commit, basta executar &lt;code&gt;git diff HEAD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/img/comandos-basicos-log.png&quot; alt=&quot;git log&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-branch&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Branch&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;branch&lt;/code&gt; gerencia branches (ramificações) no seu repositório, excluindo-os, criando-os
ou listando-os.&lt;/p&gt;

&lt;div id=&quot;id-comandos-basicos-checkout&quot;&gt;&lt;/div&gt;

&lt;p&gt;####Checkout&lt;/p&gt;

&lt;p&gt;Serve para navegar entre branches ou commits.&lt;/p&gt;

&lt;div id=&quot;id-demonstracao-pratica&quot;&gt;&lt;/div&gt;

&lt;p&gt;##Demonstração prática&lt;/p&gt;

&lt;p&gt;Pra finalizar, vou criar um diretório, criar arquivos, gerencia-los com o Git, mostrando
passo-a-passo o que eu faria.&lt;/p&gt;

&lt;p&gt;####Primeiro commit&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir exemplo
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;exemplo/
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby exemplo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; Initialized empty Git repository in /home/tkovs/exemplo/.git/
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby exemplo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch nomes.txt
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby exemplo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby exemplo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; On branch master
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; Initial commit
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; Changes to be committed:
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to unstage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 	new file:   nomes.txt
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby exemplo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Início do exemplo&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root-commit&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; e3c49ac&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Início &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; exemplo
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; file changed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;  create mode &lt;span class=&quot;m&quot;&gt;100644&lt;/span&gt; nomes.txt
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tkovs@toby exemplo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Acima, eu crio a pasta desse exemplo; entro nela; inicio o Git; crio um arquivo chamado &lt;em&gt;nomes.txt&lt;/em&gt;;
proponho essas mudanças ao Git usando o &lt;code&gt;git add&lt;/code&gt;; verifico o status atual do repositório para,
posteriormente, fazer o &lt;code&gt;git commit&lt;/code&gt;, que me diz que um arquivo foi alterado, com 0 linhas adicionadas e
0 linhas deletadas, e também é informado que o branch atual é o master, e confirma as alterações
propostas pelo &lt;code&gt;git add&lt;/code&gt;. Como pode-se ver, eu passei uma mensagem explicando as alterações que fiz
no repositório ao &lt;code&gt;git commit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A partir deste momento, qualquer arquivo nesse diretório poderá estar sob o &lt;em&gt;controle&lt;/em&gt; do Git,
exceto aqueles adicionados ao arquivo &lt;em&gt;.gitignore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O estado atual do repositório é o seguinte:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;exemplo/
└── nomes.txt

0 directories, 1 file&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Mon, 25 Apr 2016 00:00:00 -0300</pubDate>
        <link>https://tkovs.me/blog/versionamento-git</link>
        <guid isPermaLink="true">https://tkovs.me/blog/versionamento-git</guid>
        
        <category>Versionamento</category>
        
        
      </item>
    
      <item>
        <title>Programação Funcional</title>
        <description>&lt;h2 id=&quot;tabela-de-conteúdo&quot;&gt;Tabela de conteúdo&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#id-introducao&quot;&gt;Introdução&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-haskell&quot;&gt;Haskell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-conceitos&quot;&gt;Conceitos&lt;/a&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;#id-funcoes-puras&quot;&gt;Funções puras&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-imutabilidade&quot;&gt;Imutabilidade&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-recursao&quot;&gt;Recursão&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-transparencia-referencial&quot;&gt;Transparência referencial&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-funcoes&quot;&gt;Funções&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-funcoes-anonimas&quot;&gt;Funções anônimas&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#id-avaliacao-preguicosa&quot;&gt;Avaliação preguiçosa&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-o-que-e&quot;&gt;Então, o que é programação funcional?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#id-uso&quot;&gt;Uso&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;div id=&quot;id-introducao&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Esse artigo é recomendado para quem já tem experiência com programação&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Um paradigma de programação é um modo de se classificar linguagens de programação, definindo os
recursos que elas disponibilizam e o seu funcionamento. Linguagens de programação podem estar
embasadas em apenas um paradigma, e podem ser multiparadigmas. Os mais comuns são o &lt;strong&gt;orientado a
objetos&lt;/strong&gt;, o &lt;strong&gt;imperativo&lt;/strong&gt;, e o &lt;strong&gt;funcional&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Há conceitos que devem ser compreendidos para se programar funcionalmente, e eles serão
abordados no decorrer do texto.&lt;/p&gt;

&lt;div id=&quot;id-haskell&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;haskell&quot;&gt;Haskell&lt;/h2&gt;

&lt;p&gt;A linguagem escolhida para demonstração de exemplos foi Haskell, uma linguagem puramente funcional,
sem side-effects nem dados mutáveis, baseada no &lt;em&gt;Lambda Calculus&lt;/em&gt;. Em breve irei 
fazer o port para a linguagem Ruby ou Javascript dos códigos usados aqui, assim facilita o entendimento
para o maior público. Deixarei os exemplos em Haskell no post mas ficarão em segundo plano após o
port. 
Caso queira estudar Haskell por conta própria, recomendo os seguintes materiais:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.nott.ac.uk/~pszgmh/book.html&quot;&gt;&lt;strong&gt;Programming in Haskell&lt;/strong&gt; &lt;em&gt;by Graham Hutton&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/&quot;&gt;&lt;strong&gt;Wiki Haskell&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;id-conceitos&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;conceitos&quot;&gt;Conceitos&lt;/h2&gt;

&lt;p&gt;Para compreender esse paradigma, alguns conceitos são fundamentais.&lt;/p&gt;

&lt;div id=&quot;id-funcoes-puras&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;funções-puras&quot;&gt;Funções puras&lt;/h4&gt;

&lt;p&gt;São funções sem side-effects - ou efeitos colaterais, em português. Elas não
dependem de nada além daquilo que é passado a elas como argumento e não influenciam diretamente o
resto do programa. Isso vai ao encontro da computação paralela, que é a divisão de uma tarefa entre
vários processadores, ou até mesmo máquinas. Um exemplo do porque programação funcional é bastante
relacionado à computação paralela é você ter uma lista de dados e precisar aplicar
uma função sobre todos os dados: pode-se dividir essa lista em listas menores e, tendo vários
processadores a disposição, atribuir uma lista a cada um e fazê-los trabalharem paralelamente,
otimizando a tarefa. Isso é completamente viável porque uma execução não vai influenciar em outra
paralela.&lt;/p&gt;

&lt;div id=&quot;id-imutabilidade&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;imutabilidade&quot;&gt;Imutabilidade&lt;/h4&gt;

&lt;p&gt;Ao se definir o valor de um dado, ele não pode ter seu valor alterado. Ao invés
de se alterar o valor existe, cria-se uma cópia para se trabalhar, um dado novo, baseado no velho.
Ao manipular dados, você não precisa se preocupar em alterar dados, pois novos sempre são criados
quando você precisa fazer isso. Isso seria inviável na programação imperativa que se baseia em ações
e estruturas que modificam as variáveis que definem um programa.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo de uso&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;No exemplo abaixo, imagine que nesse programa escrito em C a variável &lt;code&gt;tamanho&lt;/code&gt; já tenha sido
declarada e contenha o tamanho do &lt;code&gt;vetor&lt;/code&gt;, e &lt;code&gt;soma&lt;/code&gt; já tenha sido declarada anteriormente também. Se o
conteúdo do &lt;code&gt;vetor&lt;/code&gt; for alterado por alguma ação paralela no resto do programa antes da soma terminar,
o resultado será incorreto.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tamanho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;soma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vetor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Outro exemplo do uso de programação paralela é na renderização de imagens. Há milhões de pixels que
devem ser renderizados. Todos eles podem ser renderizados individualmente, sem depender um do outro.
A ideia é mais ou menos essa. Logo, dividir a tarefa agiliza o processo.&lt;/p&gt;

&lt;div id=&quot;id-recursao&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;recursão&quot;&gt;Recursão&lt;/h4&gt;

&lt;p&gt;O único meio de iteração ao se programar funcionalmente é usando recursão.&lt;/p&gt;

&lt;p&gt;Recursão em funções, na computação, é como definimos o comportamento de uma função que invoca a si mesma.
Devido ao paralelismo, o resultado é otimizado, porém como recursão está em constante uso, as vezes
acaba pesando, mesmo com os recursos de otimização, por isso há outros meios que contribuem para 
isso, como por exemplo usar recursão de cauda.&lt;/p&gt;

&lt;p&gt;Mas antes de entrar nesse assunto, será demonstrado aqui o uso da recursão para funções comuns.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Soma de uma lista&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Funcionamento&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- sum [1,2,3,4,5]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 + sum [2,3,4,5]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 + 2 + sum [3,4,5]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 + 2 + 3 + sum [4,5]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 + 2 + 3 + 4 + sum [5]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 + 2 + 3 + 4 + 5 + sum []&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 1 + 2 + 3 + 4 + 5 + 0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 15&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Fatorial de um número&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Funcionamento&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- fat 5&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 5 * fat 4&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 5 * 4 * fat 3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 5 * 4 * 3 * fat 2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 5 * 4 * 3 * 2 * fat 1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 5 * 4 * 3 * 2 * 1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Recursão de cauda, ou &lt;strong&gt;tail call&lt;/strong&gt; em inglês, é como uma subcategoria da recursão, e é usada pois
na recursão comum o número de chamadas à função aumenta, consequentemente estourando a pilha.
Explicando isso de uma maneira simples: uma função com recursão de cauda é uma função onde a chamada
a si mesma ocorre apenas no final da função, não precisando manter na pilha de chamada os valores de
retorno. É verdade que funções recursivas podem ser mais custosas do que iterações, mas normalmente os
compiladores de linguagens funcionais transformam chamadas a funções com recursão de cauda em loops.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;O código abaixo mostra a escrita e o funcionamento da função fibonacci sem usar tail call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Fibonacci sem tail call&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;{-&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; Execução do código acima para x = 6&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib 6&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; (fib 5) + (fib 4)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; ((fib 4) + (fib 3)) + ((fib 3) + (fib 2))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; (((fib 3) + (fib 2)) + ((fib 2) + (fib 1))) + (((fib 2) + (fib 1)) + ((fib 1) + (fib 0)))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; ((((fib 2) + (fib 1)) + ((fib 1) + (fib 0))) + (((fib 1) + (fib 0)) + 1)) + ((((fib 1) + (fib 0)) + 1) + (1 + 0))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; (((((fib 1) + (fib 0)) + 1) + (1 + 0)) + ((1 + 0) + 1)) + (((1 + 0) + 1) + (1 + 0))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; ((((1 + 0) + 1) + 1) + (1 + 1)) + ((1 + 1) + 1)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; (((1 + 1) + 1) + 2) + (2 + 1)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; ((2 + 1) + 2) + 3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; (3 + 2) + 3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; 5 + 3&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; 8&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;O código abaixo mostra a escrita e o funcionamento da função fibonacci usando tail call e uma função
auxiliar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Fibonacci com tail call&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_aux&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_aux&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_aux&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fib_aux&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fib_aux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;{-&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; Funcionamento&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib 6&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(6, 0, 1)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(5, 1, 1)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(4, 1, 2)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(3, 2, 3)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(2, 3, 5)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(1, 5, 8)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; fib_aux(0, 8, 13)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-&amp;gt; 8&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;-}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-transparencia-referencial&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;transparência-referencial&quot;&gt;Transparência referencial&lt;/h4&gt;

&lt;p&gt;Não importa quantas vezes uma função seja chamada, se o parâmetro for
o mesmo o retorno também será, e a essa propriedade se dá o nome de transparência referencial.
Dessa forma, facilmente se prova que uma função está funcionando como
deveria, e consequentemente, constrói-se funções mais complexas e seguras. Isso parece óbvio, mas em
outros paradigmas, é comum a mesma expressão poder resultar em diferentes valores em diferentes
momentos dependendo do estado de execução do programa. Como o exemplo da &lt;a href=&quot;https://wiki.haskell.org&quot;&gt;wiki do
Haskell&lt;/a&gt; mostra, se &lt;code&gt;y = f x&lt;/code&gt; e &lt;code&gt;g = h y y&lt;/code&gt;, poderia substituir y por f x
de modo que g fosse descrito por &lt;code&gt;g = h (f x) (f x)&lt;/code&gt; e se obter o mesmo resultado.&lt;/p&gt;

&lt;div id=&quot;id-funcoes&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;funções&quot;&gt;Funções&lt;/h4&gt;

&lt;p&gt;Uma das características desse paradigma é que funções são cidadãs de primeira classe.
Isso implica no fato de que funções não são usadas apenas para serem declaradas e chamadas. Elas
agora suportam muitas operações comuns a outros objetos, como serem passadas para funções como
parâmetros, serem retornadas por funções, e serem atribuídas a uma variável.
Daí, temos 2 conceitos novos: &lt;strong&gt;high order functions&lt;/strong&gt; e &lt;strong&gt;currying&lt;/strong&gt;. Esses dois termos
podem ser confundidos mas a verdade é que estão intrisecamente ligados: uma high order function é
uma função que recebe uma função como parâmetro, enquanto curried functions são funções que retornam
funções como parâmetros.
Através desse recurso, qualquer função com múltiplos parâmetros pode ser escrita com apenas um. Para
exemplo será usado o código abaixo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Observando a declaração da função, ela recebe 1 inteiro e retorna uma função que recebe um inteiro e
retorna outro inteiro. No corpo da função diz-se que recebe 2 parâmetros e retorna a soma deles.
Isso ocorre porque a função acima recebe um inteiro e retorna uma função, que recebe um inteiro y e
retorna o resultado de x + y.&lt;/p&gt;

&lt;p&gt;Com esses recursos é possível escrever funções definitivamente úteis que são muito comuns em linguagens
funcionais e que costumam receber um port para a biblioteca padrão de linguagens não funcionais. Entre elas, há a
função map é uma função para manipulação de listas. Ela recebe uma função e uma lista genérica,
aplica a função sobre cada elemento da lista retornando uma nova lista com as modificações.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Usando recursão&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Usando list comprehension&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-funcoes-anonimas&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;funções-anônimas&quot;&gt;Funções anônimas&lt;/h4&gt;

&lt;p&gt;Conforme já vimos, funções são cidadãs de primeira classe. Valores de vários tipos podem ser
escritos de forma literal, sem obrigação de ser dar um nome, por exemplo &lt;code&gt;10&lt;/code&gt; &lt;code&gt;&quot;Vitor&quot;&lt;/code&gt;
&lt;code&gt;[1,2,3]&lt;/code&gt;, e agora funções também, que no caso de haskell ficaria assim: &lt;code&gt;\x -&amp;gt; 2 * x&lt;/code&gt; - uma
função que recebe um valor e retorna seu dobro. Funções anônimas apenas são funções sem nome, também
conhecidas como &lt;strong&gt;lambda functions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;São usadas para conter uma funcionalidade que não precisa de um nome ou que tem um uso muito
curto e rápido, sendo um objeto temporário. Esse recurso evita a escrita de funções de uma linha só
que seriam usadas apenas uma vez, por exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Retorno: [5,16,33]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ficaria assim:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- Retorno: [5,16,33]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div id=&quot;id-avaliacao-preguicosa&quot;&gt;&lt;/div&gt;

&lt;h4 id=&quot;avaliação-preguiçosa&quot;&gt;Avaliação preguiçosa&lt;/h4&gt;

&lt;p&gt;Lazy Evaluation. Em breve.&lt;/p&gt;

&lt;div id=&quot;id-o-que-e&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;então-o-que-é-programação-funcional&quot;&gt;Então, o que é programação funcional?&lt;/h2&gt;

&lt;p&gt;A programação funcional é um paradigma de programação que 
se baseia em funções e é muito semelhante à matemática. Até mesmo um
programa é uma função. Não há um identificador para o ponto de partida, como na linguagem C
onde se começa pela função main(). O retorno de uma função se baseia inteiramente no que lhe é
passado e o momento em que a mesma função é chamada não é importante. O software desenvolvido
segundo esse paradigma funciona através da interação entre essas funções que, devido ao paradigma,
focam no que se deve fazer e não como fazer para se chegar ao resultado. Ou seja, o objetivo é
definir uma função que, trabalhando em cima de outras funções, vistas como expressões, gere um 
valor de retorno.&lt;/p&gt;

&lt;p&gt;Você pode escrever código funcional em qualquer linguagem que dê suporte à funções de primeira
classe, como Ruby e Javascript, mas há linguagens focadas nisso, como Haskell e Elixir.&lt;/p&gt;

&lt;p&gt;Há um nível de abstração muito alto, principalmente quando funções são utilizadas, e devido
à modularização, o código cresce rápido e de forma segura, de forma que a escrita de grandes funções
se dá através da composição de funções menores, o que evita a reescrita.
Os programas podem ser avaliados em diferentes ordens pois não há dependência nas operações de
atribuição, o que também garante aos programas serem mais simples de se provar e analisar 
matematicamente do que programas procedurais.&lt;/p&gt;

&lt;p&gt;Como as funções são mais fáceis de serem avaliadas isoladamente, é mais fácil encontrar erros e
bugs e, aliás, contribuir com projetos open-source, mesmo sem um grande envolvimento.&lt;/p&gt;

&lt;p&gt;Códigos funcionais são, geralmente, mais curtos e mais fáceis de entender do que sua 
implementação no
paradigma imperativo. É muito mais fácil de se trabalhar com paralelização de tarefas devido à
imutabilidade e às funções puras. O resultado final é um código bastante modularizado e conciso,
e sua manutenção é muito mais fácil do que em um código que permite side-effects e trabalha com
dados mutáveis, assim como a otimização do código e trabalho e equipe se tornam mais simples.&lt;/p&gt;

&lt;div id=&quot;id-uso&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;uso&quot;&gt;Uso&lt;/h2&gt;

&lt;p&gt;O sistema operacional &lt;strong&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/realworld/linspire.html&quot;&gt;Linspire&lt;/a&gt;&lt;/strong&gt;, baseado no Debian, tem uma equipe que trabalha usando programação
funcional em algumas tarefas como a &lt;strong&gt;detecção de hardware&lt;/strong&gt;, &lt;strong&gt;criação de CDs de instalação&lt;/strong&gt; e
&lt;strong&gt;aplicações web internas&lt;/strong&gt;. Inicialmente usaram OCaml, depois decidiram por usar Haskell também.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;&lt;a href=&quot;http://xmonad.org/&quot;&gt;xmonad&lt;/a&gt;&lt;/strong&gt;, um gerenciador de janelas “tile-based” dinâmico para o X foi completamente desenvolvido
usando Haskell.&lt;/p&gt;

&lt;p&gt;O &lt;strong&gt;&lt;a href=&quot;http://darcs.net/&quot;&gt;Darcs&lt;/a&gt;&lt;/strong&gt;, um software para controle de versão distribuida, assim como o git e o svn, 
com muitos recursos, que inicialmente foi escrito em C++, mas logo depois foi portado pra Haskell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://pandoc.org&quot;&gt;Pandoc&lt;/a&gt;&lt;/strong&gt;, uma ferramenta para conversão de um arquivo num formato de marcação para outro. Suporta
HTML, LaTeX, OPML, Org-mode, DocBook, Wiki markup, inDesign ICML, ebooks, e vários formatos TeX.
Desenvolvido em Haskell.&lt;/p&gt;

&lt;p&gt;O Facebook tem a implementação de um
&lt;strong&gt;&lt;a href=&quot;http://www.wired.com/2015/09/facebooks-new-anti-spam-system-hints-future-coding/&quot;&gt;anti-spam&lt;/a&gt;&lt;/strong&gt; feita em Haskel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.yesodweb.com/&quot;&gt;Yesod&lt;/a&gt;&lt;/strong&gt;, uma framework para aplicações web de alta performance e alto
nível, com performance próxima à do C com acesso direto à memória. Desenvolvida em Haskell.&lt;/p&gt;

&lt;p&gt;A linguagem de programação &lt;strong&gt;&lt;a href=&quot;http://hacklang.org/&quot;&gt;Hack&lt;/a&gt;&lt;/strong&gt;, desenvolvida pelo Facebook, é um
dialeto do PHP. Sua implementação é open-source, e seu compilador foi escrito em OCaml.&lt;/p&gt;

&lt;p&gt;Há o &lt;a href=&quot;0install.net&quot;&gt;&lt;strong&gt;Zero Install (0Install)&lt;/strong&gt;&lt;/a&gt; é um gerenciador de pacotes multiplataforma,
desenvolvido em OCaml. Se você tem um web-site, você pode distribuir seu software criando um pacote
que funciona em qualquer lugar, com manipulamento de dependências e atualizações automáticas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://frama-c.com/&quot;&gt;FramaC&lt;/a&gt;&lt;/strong&gt; é uma framework para analise modular de programas escritos em C.
Um analisador estático que ispenciona programas sem executalos. Implementada em OCaml.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://haxe.org/&quot;&gt;Haxe&lt;/a&gt;&lt;/strong&gt; é uma linguagem de programação de alto nível e multiplataforma com um
compilador que produz aplicações e código fonte para diferentes plataformas através de um código
base. Seu commpilador é escrito em OCaml.&lt;/p&gt;

&lt;p&gt;Para mais exemplos, há o link abaixo que reune programas escritos no paradigma funcional aplicados
em tarefas do mundo real. Entre as linguagens citadas na lista, há Clean, Haskell, Miranda, Scheme,
SML e Erlang.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/realworld/index.html&quot;&gt;Functional Programming in the Real
World&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://din.uem.br/ia/ferramentas/lisp/lisp3.htm&quot;&gt;Departamento de Informática (DIN) da Universidade Estadual de Maringá (UEM)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.cs.nott.ac.uk/~pszgmh/book.html&quot;&gt;&lt;strong&gt;Programming in Haskell&lt;/strong&gt; &lt;em&gt;by Graham Hutton&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/Functional_programming&quot;&gt;Wiki Haskell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2014/07/dont-be-scared-of-functional-programming/&quot;&gt;Smashing Magazine&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pt.stackoverflow.com/questions/13372/programa%C3%A7%C3%A3o-funcional-e-programa%C3%A7%C3%A3o-orientada-a-objetos-o-que-s%C3%A3o-e-quais-suas&quot;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.caelum.com.br/comecando-com-o-calculo-lambda-e-a-programacao-funcional-de-verdade/&quot;&gt;Caelum&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www2.ic.uff.br/~bazilio/cursos/lp/material/ProgFuncional.pdf&quot;&gt;Instituto de Computação UFF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Apr 2016 00:00:00 -0300</pubDate>
        <link>https://tkovs.me/blog/programacao-funcional</link>
        <guid isPermaLink="true">https://tkovs.me/blog/programacao-funcional</guid>
        
        <category>Programação Funcional</category>
        
        
      </item>
    
      <item>
        <title>Introdução básica à linguagem C</title>
        <description>&lt;h4 id=&quot;tipos-de-dados&quot;&gt;Tipos de dados&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Int&lt;/strong&gt;: Número inteiro. Sem casas decimais.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ex: 0 -543 2015&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Char&lt;/strong&gt;: Letra. Apenas 1, se quiser mais é necessário criar um vetor, o que daria uma string.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ex: ‘a’ ‘%’ ‘Z’ ‘+’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Float&lt;/strong&gt;: Número real. Com casas decimais.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ex: 0.5 -5.43 20.15&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Void&lt;/strong&gt;: Tipo vazio. Por enquanto você não precisa saber muito sobre esse tipo.&lt;/p&gt;

&lt;h4 id=&quot;comentários&quot;&gt;Comentários&lt;/h4&gt;

&lt;p&gt;Comentários podem ser escritos de duas formas: linha única ou várias linhas.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Variável para guardar uma idade&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Um comentário simplesmente pra dizer que o&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;   comentário de uma linha acima é inútil pois&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;   o nome da variavel já diz tudo...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;função-main&quot;&gt;Função main&lt;/h4&gt;

&lt;p&gt;Se seu programa será um executável ele precisará da função main que sempre é a primeira a ser chamada. O esqueleto básico que, provavelmente, todos seus programas iniciais terão, é o seguinte:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Biblioteca com funções printf e scanf (e muitas outras, é claro).&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Função main. Retorna um valor inteiro. Recebe nenhum valor.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// O &amp;#39;abre chaves&amp;#39; indica o começo da função&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Código aqui&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Código aqui&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Retorna 0 se chegar até essa linha do código.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// O &amp;#39;fecha chaves&amp;#39; indica o fim da função.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;bibliotecas&quot;&gt;Bibliotecas&lt;/h4&gt;

&lt;p&gt;Você pode criar um arquivo e nele escrever funções para um determinado propósito. Esse arquivo não tem o main() pois não é um executável, não é um programa, é uma biblioteca. Por exemplo, se você não quisesse escrever a mesma função em vários programas - &lt;em&gt;calcular área de um triangulo, por exemplo&lt;/em&gt; - você a escreveria em apenas um arquivo, e no seu começo dos seus próximos algoritmos você incluiria tal arquivo no seu programa. A função &lt;strong&gt;printf&lt;/strong&gt; e a &lt;strong&gt;scanf&lt;/strong&gt; estão na biblioteca &lt;em&gt;stdio&lt;/em&gt;, por isso você costuma adicionar essa biblioteca nos programas. Exemplo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Se não tivesse adicionado a stdio nesse código, daria um erro na próxima linha.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;escopo&quot;&gt;Escopo&lt;/h4&gt;

&lt;p&gt;Um escopo é o que delimita o código que pertence a uma função, é o que diz a o quê tal código pertence. Um código não pode acessar variáveis que pertencem a um escopo que não seja o próprio ou um anterior.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do main.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do if.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// A seguinte linha não dá erro.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// É possível exibir a variável j aqui usando printf.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// Não ocorre um erro na próxima linha pois o escopo do if está dentro do escopo do main, ou seja, o escopo do main é um escopo anterior ao do if.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do if.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;   
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Erro na linha abaixo, pois a variavel j não existe fora do escopo do if.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do main.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;declarando-variáveis--vetor--string&quot;&gt;Declarando variáveis &amp;amp; Vetor &amp;amp; String&lt;/h4&gt;

&lt;p&gt;Um vetor é apenas uma variável capaz de conter vários valores do mesmo tipo. É como se uma variável comum fosse um pedaço de papel (uma página) e um vetor fosse um livro (conjunto de páginas). A seguir, um “tipo de dado” chamado string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt;: Na verdade não há o tipo string, o que existe é um vetor de char onde o último elemento sempre deve ser o ‘\0’ que indica o fim da string. Sendo assim, se quiser uma variável pra armazenar a string “panda” seriam necessários 6 espaços no vetor: 5 para o nome “panda”, e 1 para o ‘\0’.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Ex:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fazer isso:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;panda&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// É a mesma coisa que fazer isso:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Declaração de variáveis&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Variável do tipo inteiro chamada i.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Variável do tipo float chamada f.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.83&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Usa-se ponto para separar as casas decimais. Cuidado pra não usar vírgula, dará erro.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Parece se declarar um vetor, usa-se colchetes depois do nome da variavel com o tamanho de elementos.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Uma string por exemplo, é um vetor de char. Logo, pra guardar o nome panda, como visto anteriormente, bastaria o seguinte:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;panda&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;funções-de-leitura-e-escrita-printf--scanf&quot;&gt;Funções de leitura e escrita (printf / scanf)&lt;/h4&gt;

&lt;p&gt;Para escrever algo na tela (uma mensagem ao usuário ou o resultado de uma conta) é necessário usar a função &lt;strong&gt;printf&lt;/strong&gt;. Para ler um valor do usuário, a função &lt;strong&gt;scanf&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Scanf&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Parece receber uma informação do usuário usa-se a função scanf. Ela recebe uma string e as variáveis que receberão o valor.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Na string, informamos os tipos dos dados que serão lidos e, separadas por vírgula, as variáveis.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// %d - inteiro / %f - float / %c - char / %s - string&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// O &amp;amp; antes da variável é necessário pois a função precisa saber o endereço da variável i para salvar o valor lá.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// %d entre aspas pois é uma string, e a variável após a vírgula.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Leitura de uma letra.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Leitura de uma string. O &amp;amp; não é necessário pois essa variável não é como as outras, é um vetor, e ao usar seu nome já se está dizendo seu endereço.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// A função printf recebe uma string e, se necessário, valor de variáveis na string.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Parece exibir o conteúdo de variáveis não é necessário o &amp;amp;.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Numero informado pelo usuario: %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Tchau!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;operadores--aritmética&quot;&gt;Operadores &amp;amp;&amp;amp; Aritmética&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;+ soma&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;- subtração&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/ divisão&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;* multiplicação&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;% resto&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;== igual&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;!= diferente&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;&amp;lt; menor&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;&amp;gt; maior&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;&amp;lt;= menor ou igual&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;&amp;gt;= maior ou igual&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;! negação&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Exemplo:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Insira dois valores: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%f %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Soma: %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Subtracao: %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Multiplicacao: %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Divisao: %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Resto da divisao: %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;condição-if&quot;&gt;Condição (if)&lt;/h4&gt;

&lt;p&gt;O &lt;strong&gt;if&lt;/strong&gt; é uma palavra-chave em C para se tomar decisões, fazer comparações.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// O usuário insere o valor de a e o valor de b.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// if (condição) { código }&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Aqui é comparado a e b.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do if&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Valores iguais.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do if&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do if&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Valores diferentes.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do if.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Não é necessário fazer duas condições pois existe o else. Else é o senão, é onde está o código que será executado caso a condição não seja satisfeita.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Comparação. O código do escopo do if será executado apenas se a condição do if for verdadeira.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do if&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Valores iguais.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do if&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Se a condição do if for falsa, o código do else será executado.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do else&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a maior que b.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do else.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Início do escopo do else&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a menor que b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Se a não é igual a b, não é maior, então é menor.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fim do escopo do else.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;loops-repetição&quot;&gt;Loops (repetição)&lt;/h4&gt;

&lt;p&gt;Para usar esse recurso existem algumas palavras-chave como while, for e do/while. Na while só é necessária uma condição e, toda vez que ela for verdadeira, o código no escopo do while é executado.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i maior que 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i menor ou igual a 0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Para se usar o for 3 definições são necessárias possíveis. Atribuição, condição, ação.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Esqueleto: for (atribuição; condição; ação) { código }&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// A atribuição ocorre apenas 1 vez&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// A condição é checada toda vez que o for é executado ou seu escopo acaba. Se a condição for verdadeira ele será executado novamente (a ação também)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// A ação ocorre toda vez após a condição ser checada. A ação só acontece a partir da segunda vez que o for é executado.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;O do/while é como o while, porém sem comparação inicial. Diferente do while que só roda a primeira vez que a condição for verdadeira, no do/while sempre vai executar o código de seu escopo pelo menos 1 vez.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Valor de i: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ou i++&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;funções&quot;&gt;Funções&lt;/h4&gt;

&lt;p&gt;Funções são muito úteis, inicialmente, para modularizar seu código. Um meio de separar trechos de códigos que têm um mesmo objetivo em um lugar separado do resto do código. Funções são como empregados, onde cada um tem uma função específica a fazer e, ao ser necessário que x trabalho seja realizado você não o reescreve no código, simplesmente chama a função encarregada de realizar a tarefa x.&lt;/p&gt;

&lt;p&gt;Funções são escritas de acordo com a seguinte sintaxe: &lt;tipo de=&quot;&quot; retorno=&quot;&quot;&gt; &lt;nome função=&quot;&quot;&gt;(&lt;tipo parametro=&quot;&quot;&gt; &amp;lt;nome parametro, ...) { &lt;codigo&gt; }&lt;/codigo&gt;&lt;/tipo&gt;&lt;/nome&gt;&lt;/tipo&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;tipo_retorno&amp;gt; &amp;lt;nome&amp;gt; (&amp;lt;parametros&amp;gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//    &amp;lt;codigo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//    &amp;lt;codigo&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//    return &amp;lt;valor&amp;gt;; // return apenas se o tipo de retorno não for void&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Exemplo:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saudacao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Oi pessoa!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;soma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;saudacao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5 + 3 = %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 31 Mar 2016 00:00:00 -0300</pubDate>
        <link>https://tkovs.me/blog/introducao-linguagem-c</link>
        <guid isPermaLink="true">https://tkovs.me/blog/introducao-linguagem-c</guid>
        
        <category>Linguagem c</category>
        
        
      </item>
    
  </channel>
</rss>
